// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"

	openapi "github.com/ogen-go/ent2ogen/example/openapi"
)

type CitySlice []*City

func (s CitySlice) ToOpenAPI() (_ []openapi.City, err error) {
	result := make([]openapi.City, len(s))
	for i, v := range s {
		result[i], err = v.ToOpenAPI()
		if err != nil {
			return nil, err
		}
	}

	return result, nil
}

func (e *City) ToOpenAPI() (t openapi.City, err error) {
	t.Name = e.Name
	t.RequiredEnum = openapi.CityRequiredEnum(e.RequiredEnum)
	if e.NullableEnum != nil {
		t.NullableEnum.SetTo(openapi.CityNullableEnum(*e.NullableEnum))
	}
	return t, nil
}

type UserSlice []*User

// Following edges must be loaded:
//   required_city
//   optional_city
//   friend_list:
//     required_city
//     optional_city
//     friend_list...
func (s UserSlice) ToOpenAPI() (_ []openapi.User, err error) {
	result := make([]openapi.User, len(s))
	for i, v := range s {
		result[i], err = v.ToOpenAPI()
		if err != nil {
			return nil, err
		}
	}

	return result, nil
}

// Following edges must be loaded:
//   required_city
//   optional_city
//   friend_list:
//     required_city
//     optional_city
//     friend_list...
func (e *User) ToOpenAPI() (t openapi.User, err error) {
	t.ID = e.ID
	t.FirstName = e.FirstName
	t.LastName = e.LastName
	t.Username = e.UserName
	if e.OptionalNullableBool != nil {
		t.OptionalNullableBool.SetTo(*e.OptionalNullableBool)
	}
	// Edge 'required_city'.
	{
		v, err := e.Edges.RequiredCityOrErr()
		if err == nil {
			converted, err := v.ToOpenAPI()
			if err != nil {
				return t, fmt.Errorf("convert 'required_city' edge: %w", err)
			}
			t.RequiredCity = converted
		} else {
			return t, fmt.Errorf("load 'required_city' edge: %w", err)
		}
	}
	// Edge 'optional_city'.
	{
		v, err := e.Edges.OptionalCityOrErr()
		if err == nil {
			converted, err := v.ToOpenAPI()
			if err != nil {
				return t, fmt.Errorf("convert 'optional_city' edge: %w", err)
			}
			t.OptionalCity.SetTo(converted)
		} else if !IsNotFound(err) {
			return t, fmt.Errorf("load 'optional_city' edge: %w", err)
		}
	}
	// Edge 'friend_list'.
	{
		v, err := e.Edges.FriendListOrErr()
		if err == nil {
			converted, err := UserSlice(v).ToOpenAPI()
			if err != nil {
				return t, fmt.Errorf("convert 'friend_list' edge: %w", err)
			}
			t.Friends = converted
		} else if !IsNotFound(err) {
			return t, fmt.Errorf("load 'friend_list' edge: %w", err)
		}
	}
	return t, nil
}
